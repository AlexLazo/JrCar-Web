@page "/editcategory/{categoryId}"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager NavigationManager
@inject IAddCategoryUseCase AddCategoryUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IEditCategoryUseCase EditCategoryUseCase

<h2>Editar Categoría</h2>
<br />
@if (category != null)
{
    <EditForm Model="category" OnValidSubmit="OnValidSumit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group col-lg-4 col-sm-2 col-md-3">
            <label for="name">Nombre</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
        </div>

        <div class="form-group col-lg-4 col-sm-2 col-md-3">
            <label for="description">Descripción</label>
            <InputText id="description" @bind-Value="category.Description" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary btn-outline-success"><i class="fa fa-check"> Guardar</i></button>
        <button type="button" class="btn btn-primary btn-outline-danger" @onclick="OnCancel"><i class="fa fa-xmark"> Cancelar</i></button>
    </EditForm>

}


@code {
    [Parameter]
    public string CategoryId { get; set; }

    private Category category;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.CategoryId, out int iCategoryId))
        {
            var cat = GetCategoryByIdUseCase.Execute(iCategoryId);
            this.category = new Category { CategoryId = cat.CategoryId, Name = cat.Name, Description = cat.Description };
        }
    }

    private void OnValidSumit()
    {
        EditCategoryUseCase.Execute(this.category);
        NavigationManager.NavigateTo("/categories");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/categories");
    }

}
